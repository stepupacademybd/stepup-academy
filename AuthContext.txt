import React, { createContext, useState, useContext, ReactNode } from 'react';
import { User, Role } from '../types';

interface AuthContextType {
    user: User | null;
    login: (username: string) => Promise<void>;
    logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Mock users
const MOCK_USERS: { [key: string]: User } = {
    'admin': { id: 'user-001', name: 'Admin User', role: Role.Admin },
    'subadmin': { id: 'user-002', name: 'Sub-Admin User', role: Role.SubAdmin },
    'student': { id: 'STU-001', name: 'Saiful Islam', role: Role.Student }
};

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);

    const login = async (username: string): Promise<void> => {
        return new Promise(resolve => {
            setTimeout(() => {
                const foundUser = MOCK_USERS[username.toLowerCase()];
                if (foundUser) {
                    setUser(foundUser);
                }
                resolve();
            }, 500);
        });
    };

    const logout = () => {
        setUser(null);
    };

    return (
        <AuthContext.Provider value={{ user, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = (): AuthContextType => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};