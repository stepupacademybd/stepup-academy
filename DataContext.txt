import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';
import { Participant, Transaction } from '../types';
import { getParticipants, getTransactions, addTransaction as apiAddTransaction } from '../services/financialService';

interface DataContextType {
    participants: Participant[];
    transactions: Transaction[];
    addTransaction: (transaction: Omit<Transaction, 'id'>) => Promise<Transaction>;
    loading: boolean;
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export const DataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [participants, setParticipants] = useState<Participant[]>([]);
    const [transactions, setTransactions] = useState<Transaction[]>([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            const [fetchedParticipants, fetchedTransactions] = await Promise.all([
                getParticipants(),
                getTransactions()
            ]);
            setParticipants(fetchedParticipants);
            setTransactions(fetchedTransactions);
            setLoading(false);
        };
        fetchData();
    }, []);

    const addTransaction = async (transaction: Omit<Transaction, 'id'>): Promise<Transaction> => {
        const newTransaction = await apiAddTransaction(transaction);
        setTransactions(prev => [newTransaction, ...prev]);
        return newTransaction;
    };


    return (
        <DataContext.Provider value={{ participants, transactions, addTransaction, loading }}>
            {children}
        </DataContext.Provider>
    );
};

export const useData = (): DataContextType => {
    const context = useContext(DataContext);
    if (!context) {
        throw new Error('useData must be used within a DataProvider');
    }
    return context;
};