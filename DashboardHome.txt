import React from 'react';
import { useData } from '../contexts/DataContext';
import { useLanguage } from '../contexts/LanguageContext';
import { Transaction, TransactionType } from '../types';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const KPICard: React.FC<{ title: string; value: string; color: string }> = ({ title, value, color }) => (
    <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="text-sm font-medium text-gray-500">{title}</h3>
        <p className={`mt-2 text-3xl font-bold ${color}`}>{value}</p>
    </div>
);

const DashboardHome: React.FC = () => {
    const { transactions, loading } = useData();
    const { t } = useLanguage();

    if (loading) return <div>{t('loading')}</div>;
    
    const kpiData = React.useMemo(() => {
        return transactions.reduce((acc, tr) => {
            if (tr.type === TransactionType.Income) {
                acc.totalIncome += tr.amountPaid;
            } else {
                acc.totalExpense += tr.amountPaid;
            }
            acc.totalDue += tr.due;
            return acc;
        }, { totalIncome: 0, totalExpense: 0, totalDue: 0 });
    }, [transactions]);

    const netBalance = kpiData.totalIncome - kpiData.totalExpense;
    
    const formatCurrency = (amount: number) => `৳${amount.toLocaleString('en-IN')}`;

    const incomeByCategory = React.useMemo(() => {
        const categoryMap = new Map<string, number>();
        transactions
            .filter(t => t.type === TransactionType.Income)
            .forEach(t => {
                categoryMap.set(t.category, (categoryMap.get(t.category) || 0) + t.amountPaid);
            });
        return Array.from(categoryMap.entries()).map(([name, value]) => ({ name, value }));
    }, [transactions]);

    const monthlyTrends = React.useMemo(() => {
        const trends: { [key: string]: { income: number, expense: number } } = {};
        transactions.forEach(t => {
            const month = new Date(t.date).toLocaleString('default', { month: 'short', year: 'numeric' });
            if (!trends[month]) trends[month] = { income: 0, expense: 0 };
            if (t.type === TransactionType.Income) {
                trends[month].income += t.amountPaid;
            } else {
                trends[month].expense += t.amountPaid;
            }
        });
        return Object.entries(trends).map(([name, values]) => ({ name, ...values })).reverse();
    }, [transactions]);

    const PIE_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF'];

    return (
        <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <KPICard title={t('totalIncome')} value={formatCurrency(kpiData.totalIncome)} color="text-brand-success" />
                <KPICard title={t('totalExpense')} value={formatCurrency(kpiData.totalExpense)} color="text-brand-danger" />
                <KPICard title={t('netBalance')} value={formatCurrency(netBalance)} color={netBalance >= 0 ? 'text-brand-primary' : 'text-brand-danger'} />
                <KPICard title={t('totalDue')} value={formatCurrency(kpiData.totalDue)} color="text-brand-accent" />
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
                <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow">
                    <h3 className="font-semibold text-lg mb-4">{t('incomeByCategory')}</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                            <Pie data={incomeByCategory} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={100} fill="#8884d8" label>
                                {incomeByCategory.map((entry, index) => <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />)}
                            </Pie>
                            <Tooltip formatter={(value: number) => formatCurrency(value)} />
                            <Legend />
                        </PieChart>
                    </ResponsiveContainer>
                </div>
                <div className="lg:col-span-3 bg-white p-6 rounded-lg shadow">
                    <h3 className="font-semibold text-lg mb-4">{t('monthlyTrends')}</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={monthlyTrends}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="name" />
                            <YAxis tickFormatter={(value: number) => `৳${value/1000}k`} />
                            <Tooltip formatter={(value: number) => formatCurrency(value)} />
                            <Legend />
                            <Bar dataKey="income" fill="#36B37E" name={t('income')} />
                            <Bar dataKey="expense" fill="#FF5630" name={t('expense')} />
                        </BarChart>
                    </ResponsiveContainer>
                </div>
            </div>
        </div>
    );
};

export default DashboardHome;